#+BEGIN_COMMENT
Copyright 2017 Bradley Jensen

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#+END_COMMENT

#+TITLE: Hacking on SHCL
#+AUTHOR: Brad Jensen

So you want to contribute to SHCL?  Here's everything you need to know!

* File Organization
The root folder of the SHCL source tree contains a few loose files and
several sub-directories.  The root folder should not contain any SHCL
source files.  Let's explore the sub-directories!

** =/core/=
This directory contains the "core" of SHCL.  The core contains just
the common functionality that both the SHCL library and the SHCL shell
need.  Think of it as a toolbox that you can use to build your own
shell.  It also represents the portion of SHCL that is required for
non-interactive use cases (e.g. applications that just wish to use
SHCL's reader macro).

*** =/core/support/=
This folder contains the C functionality that cannot be written in
Common Lisp (even with the help of CFFI).  Currently, it contains two
things:
1. function wrappers around POSIX APIs which are defined as macros, and
2. the ~shcl_spawn~ function, which provides a bit more flexibility
   than ~posix_spawn~.

You might be thinking "sure, I see why you need #1, but can't you
implement #2 in Common Lisp?".  Well, yes.  Sort of.  Some Common Lisp
compilers (namely, SBCL) won't let you fork when there are multiple
threads.  SHCL uses threads.  We can go behind the compiler's back and
call ~fork~ directly, but that puts us into an unsupported
configuration.  Its easier and more portable to just write the ~fork~
~exec~ logic in straight C.  The lisp compiler should (hopefully)
never notice that we forked.  That's the theory, at least.

** =/shell/=
This directory contains things that are only relevant to SHCL when it
is used as an interactive shell.  For example, shell builtins.

Note: some builtins are defined in =/core/=.

** =/test/=
This directory contains tests that ensure SHCL is working correctly.
The tests are run by the =test.lisp= script in the root directory.

** =/linters/=
This directory contains scripts which detect stylistic issues with
SHCL's source.

* SHCL Doesn't Fork
SHCL is not a typical shell.  In a typical shell, forking isn't a
problem.  SHCL doesn't fork unless it is going to exec.  That design
decision has far-reaching implications, and it substantially
complicates many tasks that a shell must perform.

Subshells, for example, are significantly more difficult.  Consider
the following shell commands.

#+BEGIN_EXAMPLE
(
  exec > tmp.txt;
  VAR=value;
  cd somePath;
  exec echo some content;
  echo not echoed;
)
echo other content
#+END_EXAMPLE

Imagine how a normal forking shell would handle this.  When it tries
to evaluate the subshell it would fork off a new shell process.  It
would then evaluate the body of the subshell inside the new process.
That body involves making irreversible changes to the shell process.
Meanwhile, the main shell is unaffected by any of the the subshell's
changes.  They are neatly and automatically contained within the
subshell.

Since SHCL doesn't fork, subshells aren't quite so simple.  Subshells
are evaluated inside the same process as the main shell, but changes
to the process environment must not leak outside of the subshell.
With careful use of ~UNWIND-PROTECT~, you can imagine emulating the
effect of a sunshell.  Just carefully put everything back to the way
it was as the stack unwinds.  Things get even more complicated when
you consider that subshells must be able to execute in parallel with
the main shell.  After all, they might have been run in the background
with ~&~.  You could even have multiple subshells with different
opinions on what file descriptor 1 refers to!

#+BEGIN_QUOTE
All problems in computer science can be solved by another level of
indirection
  -- David Wheeler
#+END_QUOTE

To make subshells work, SHCL avoids making destructive changing the
process at all.  All changes go through a layer of indirection.  For
example, suppose you ask SHCL to redirect standard output to a file.
#+BEGIN_EXAMPLE
exec > tmp.txt
#+END_EXAMPLE
SHCL opens the desired file.  Let's say that the operating system
returns file descriptor 3 as the handle for =tmp.txt=.  Instead of
using ~dup2~ to modify file descriptor 1, SHCL instead just makes a
note in its own data structures that virtual file descriptor 1 should
take on the value of physical file descriptor 3.  When spawning a
subprocess, SHCL will consult that table and make the appropriate
changes prior to calling ~exec~.

* The Pipeline
SHCL is, at its heart, a pipeline.  Generally, each stage is a
transformation from one sequence to another sequence.  You can see
this in =shcl/shell/main=, where the pipeline is created by composing
the transformation functions.

#+BEGIN_SRC lisp
;; shell/main.lisp circa March 2019
(as-> wrapped-stream x
  (logging-token-sequence x)
  (logging-command-sequence x)
  (logging-evaluation-form-sequence x)
  (logging-evaluated-result-sequence x))
#+END_SRC

** Lexing
The lexer takes a character stream and produces a lazy sequence
containing the tokens found in the stream.

The lexer can be extended using lexer readtables (much like Common
Lisp supports adding reader macros).

** Parsing
The parsing phase consumes a token sequence and produces a lazy syntax
tree sequence.  Note: syntax trees are not simply lists.  They are
CLOS objects with named slots.

** Translation
The translation phase consumes a sequence of syntax tree objects and
produces a lazy sequence of equivalent Common Lisp forms.  Typically,
the post-translation form is one of the macros provided by the
=shcl/core/shell-form= package.  The macros in that package provide a
DSL of sorts that has shell-like semantics.

*** Expansion
Its worth noting that before any shell builtin, binary, or
user-defined shell function is run, the arguments of the command are
"expanded".  Expansion isn't conceptually part of the pipeline, but it
is complex enough to be worth mentioning.  The form produced by the
translation phase includes the necessary calls to expand arguments,
but expansion doesn't take place until the evaluation phase of the
pipeline.

** Evaluation
Evaluation is the simplest phase of the pipeline.  At the end of the
translation phase, a lisp form is produced.  This lisp form just needs
to be evaluated!

If the entire pipeline before this point ran at compile time (e.g. by
using the =evaluate-constant-shell-string= macro or SHCL's reader
macro), SHCL will arrange for the lisp form to be evaluated like any
regular lisp form that appears in a program.  That is, it can access
the lexical environment in which it appears, it will get compiled, and
it will be evaluated some time later.

If the pipeline runs at runtime (e.g. by using the
=evaluate-shell-string= macro or by using SHCL interactively), then
the lisp form is simply passed to ~eval~.

* Assorted Style Guidelines
- Every exported symbol should have documentation.  Documenting
  internal functions is also a Good Thing.  Document methods at your
  discretion.
- Only tests are allowed to access unexported symbols.
- Treat all exported symbols as public API.  No packages are private.
- Long lines should be avoided.
- Prefer immutable data structures (e.g. fset or define-data).
- Prefer a functional style

* Highly Desired Contributions
Not sure where to begin?  How about you take on one of these open
problems!
- Tab complete
- Signal handling (this is especially thorny given the way subshells
  work!)
- Job control
- Prompt customization
- More unit tests
