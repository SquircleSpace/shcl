#+BEGIN_COMMENT
Copyright 2017 Bradley Jensen

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#+END_COMMENT

#+TITLE: SHCL: Shell Meets Common Lisp
#+AUTHOR: Brad Jensen

SHCL is
1. a very customizable shell made with secret alien technology, and
2. an unholy union of POSIX Shell and Common Lisp.

Behold Common Lisp embedded in POSIX shell embedded in Common Lisp!
Notice that the Common Lisp form embedded in the shell expression can
access the lexical environment.
#+BEGIN_EXAMPLE
(let ((rld "rld"))
  (capture (:stdout)
    #$ echo Hello ,(concatenate 'string "Wo" rld) | wc -c #$))
; => "12"
#+END_EXAMPLE

Now lay your eyes on a lisp function participating in a pipeline!
#+BEGIN_EXAMPLE
shcl> : ,(shcl/core/debug:graph-dependencies) | dot -Tpng > graph.png
#+END_EXAMPLE

* Building SHCL

SHCL is only really tested against SBCL and CCL, but it should be
portable to other lisp compilers.  Be aware that ECL is known to be
problematic because it tries to reap child processes automatically.

First, you'll need to install some dependencies.  To start with,
you'll need Clang and libedit.  There's also some Common Lisp
dependencies that need to be taken care of: SBCL, Quicklisp, and
cffi-grovel.  If you're new to building Common Lisp projects, you
might want to let [[https://github.com/roswell/roswell][Roswell]] set up your lisp environment for you.

#+BEGIN_EXAMPLE
# Set up Clang, libedit, and Roswell
make LISP='ros -s cffi-grovel run --'
#+END_EXAMPLE

You can skip Roswell if you want.  Just make sure that you set ~LISP~
to a command that runs SBCL with Quicklisp and cffi-grovel loaded.
For example,

#+BEGIN_EXAMPLE
# Set up Clang, libedit, SBCL, and Quicklisp
QUICKLISP_SETUP=~/quicklisp/setup.lisp # or wherever you installed quicklisp
make LISP="sbcl --no-userinit --load \"$QUICKLISP_SETUP\" --eval '(ql:quickload :cffi-grovel)'"
#+END_EXAMPLE

* Example Usage

I don't know what you're expecting to see here.  Its a POSIX-like
shell.  You can do (almost) all your normal POSIX shell stuff in it.

#+BEGIN_EXAMPLE
shcl> echo foobar
foobar
shcl> FOO=$(echo echo foo; false) || echo assignment returned false
assignment returned false
shcl> $FOO
foo
shcl> { echo foobar ; echo baz ; echo blip ; } | tail -n 1
blip
shcl> shcl-enable-lisp-syntax
shcl> if [ ,(+ 1 2 3) = ,(* 2 3) ]; then
> echo woah
> fi
woah
shcl> shcl-repl
shcl (lisp)> (format t "Hello world~%")
Hello world
NIL
shcl (lisp)> (define-builtin set-env (&option print &required var value)
> (loop :for str :across print :do (format t "~A~%" str))
> (setf (env var) value)
> 0)
SET-ENV
shcl (lisp)> ^D
shcl> set-env --print hi --print there VAR value | wc -l
2
shcl> echo $VAR
value
shcl> ^D
#+END_EXAMPLE

Okay, actually, that kind of went off the rails.
