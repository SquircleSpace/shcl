#+BEGIN_COMMENT
Copyright 2017 Bradley Jensen

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#+END_COMMENT

#+TITLE: SHCL: Shell Meets Common Lisp
#+AUTHOR: Brad Jensen

SHCL is
1. a very customizable shell made with secret alien technology, and
2. an unholy union of POSIX Shell and Common Lisp.

Behold Common Lisp embedded in POSIX shell embedded in Common Lisp!
Notice that the Common Lisp form embedded in the shell expression can
access the lexical environment.
#+BEGIN_EXAMPLE
(let ((rld "rld"))
  (capture (:stdout)
    #$ echo Hello ,(concatenate 'string "Wo" rld) | wc -c #$))
; => "12"
#+END_EXAMPLE

Now lay your eyes on a lisp function participating in a pipeline!
#+BEGIN_EXAMPLE
shcl> : ,(shcl/core/debug:graph-dependencies) | dot -Tpng > graph.png
#+END_EXAMPLE

* Building SHCL

SHCL is only really tested against SBCL, but it should be portable to
other lisp compilers.  Be aware that ECL is known to be problematic
because it tries to reap child processes automatically.  In addition
to several lisp libraries, SHCL depends on clang and libedit.

Building with Nix:

#+BEGIN_EXAMPLE
nix-shell
make LISP='cl-wrapper.sh sbcl'
#+END_EXAMPLE

Building without nix:

#+BEGIN_EXAMPLE
# Acquire dependencies (don't forget the lisp dependencies!)
make
#+END_EXAMPLE

* Example Usage

I don't know what you're expecting to see here.  Its a POSIX-like
shell.  You can do (almost) all your normal POSIX shell stuff in it.

#+BEGIN_EXAMPLE
shcl> echo foobar
foobar
shcl> FOO=$(echo echo foo; false) || echo assignment returned false
assignment returned false
shcl> $FOO
foo
shcl> { echo foobar ; echo baz ; echo blip ; } | tail -n 1
blip
shcl> shcl-enable-lisp-syntax
shcl> if [ ,(+ 1 2 3) = ,(* 2 3) ]; then
> echo woah
> fi
woah
shcl> shcl-repl
shcl (lisp)> (format t "Hello world~%")
Hello world
NIL
shcl (lisp)> (define-builtin set-env (&option print &required var value)
> (loop :for str :across print :do (format t "~A~%" str))
> (setf (env var) value)
> 0)
SET-ENV
shcl (lisp)> ^D
shcl> set-env --print hi --print there VAR value | wc -l
2
shcl> echo $VAR
value
shcl> ^D
#+END_EXAMPLE

Okay, actually, that kind of went off the rails.
